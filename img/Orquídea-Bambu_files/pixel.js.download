// Pixel library
!function(f,b,e,v,n,t,s)
{if(f.fbq)return;n=f.fbq=function(){n.callMethod?
n.callMethod.apply(n,arguments):n.queue.push(arguments)};
if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
n.queue=[];t=b.createElement(e);t.async=!0;
t.src=v;s=b.getElementsByTagName(e)[0];
s.parentNode.insertBefore(t,s)}(window, document,'script',
'https://connect.facebook.net/en_US/fbevents.js');


// Facebook Events
(function() {

  let getCode = field => {
    let scripts = document.getElementsByTagName("script"),
        pattern = "(" + field + "=)([a-zA-Z0-9-, ]{0,})";

    for (var i in scripts) {
      if (/pixel/.test(scripts[i].src)) {
        var values = scripts[i].src.match(new RegExp(pattern));

        if (values != null) {
          return values[2];
        }
      }
    }
  };

  let GTM_get = (key = null) => {
    return dataLayer.map(elem => elem[key]).filter(valor => {valor != "undefined"; return valor; }).pop();
  };

  let fbEv = (event_name, params, track_event, state)=>{
    track_event = track_event || 'track';
    let event_key = track_event + '-' + event_name;
        
    if(typeof event_name != 'undefined'){
      fbq(track_event, event_name, params);
      console.log('[Facebook Pixel-Tray] Event ' + event_name);
    }
  }

  let getProducts = (products) => {
    var res = '', i, id, prodid = [], value = 0;
    if(!products) return ''; 

    if(products.length == 1){
      id = products[0]['idProduct'] || products[0]['id'];
      res = '' + id;
    }
    if(products.length > 1){
      products.map((product) => {
        id = product.idProduct || product.id;
        value += parseFloat(product.sellPrice ? product.sellPrice : product.price)
        if(id > 0){ prodid.push(id); }
      })
      res = '[' + prodid.join(', ') + ']';
    }
    value = (parseFloat(value/products.length)).toFixed(2)
    return {"id": res, "value": value };
  }

  let getNumItens = (products) => {
    var res = '', i, id, prodid = [];
    if(!products) return ''; 

    if(products.length == 1){
      qtd = products[0]['quantity']
      res = '' + qtd;
    }
    if(products.length > 1){
      products.map((product) => {
        qtd = product.quantity

      })
      res = qtd;
    }
    return res;
  }

  let getProductsCheckout = () =>{
    let ecommerce = dataLayer.map(elem => elem['ecommerce']).filter(valor => { return valor})
    let actionField = ecommerce.map(elem => elem['checkout']).filter(valor => { return valor})
    let cartProducts = actionField.map(elen => elen['products']).filter( valor => { if(valor) return valor})[0]
    if (cartProducts.length > 1){
      let cartItens = { content_ids: [], num_items: 0 , value: '' }

      let price = 0;
      let num_items = 0
  
      cartProducts.map((cartProduct) =>{
        let item = cartProduct.id
        cartItens.content_ids.push(item)
        num_items += parseInt(cartProduct.quantity)
        price = (parseFloat(price) + (parseFloat(cartProduct.price) * cartProduct.quantity));

      })
      cartItens.num_items = num_items;
      cartItens.value = price.toFixed(2);

      return cartItens
    }

    if (cartProducts.length == 1){
      let cartItens = { content_ids: parseInt(cartProducts[0].id), num_items: cartProducts[0].quantity , value: cartProducts[0].price }
      return cartItens

    }

  }

    var getTotalProducts = function (products) {
      var res = '', i, price, prodid = [];
      if(!products) return '0'; 
      if(products.length == 1){
        price = parseFloat(products[0]['price']) * parseInt(products[0]['quantity']);
        res = '' + price;
      } else {
        price = 0;
        products.map((product)=>{
          price += parseFloat(product.price) * parseInt(product.quantity);
        })
        res = '' + parseFloat(price).toFixed(2);
      }
      return res;
    }


    setTimeout(function () {

    var state = {
        "tfb_version" :  "v2.0.13",
        "PIXEL_ID" : getCode("fb_pixel"),
        "DISABLE_EVENT" : getCode("disable_event"),
        "firedEvents" : []
    }

    console.log("[Facebook Pixel-Tray] Initialized: " + state.tfb_version);
    console.log("[Facebook Pixel-Tray] PixelID: " + state.PIXEL_ID);

    // Evento PadrÃ£o
    fbq("init", state.PIXEL_ID);
    fbq.disablePushState = true;
    fbq("track", "PageView", { external_id: GTM_get('visitorSessionID')});

    

    if(state.DISABLE_EVENT == 'off'){
        let events ={
            "CONTENT" :'ViewContent',
            "CATEGORY" : 'ViewCategory',
            "SEARCH" : 'Search',
            "CART": 'AddToCart',
            "CHECKOUT": 'InitiateCheckout',
            "PURCHASE": 'Purchase',
        }

        switch (GTM_get('pageCategory').toLowerCase()) {
          
            // eventos personalizados
            case "catalogo":
              var products_id = getProducts(GTM_get('listProducts')).id;
              fbEv(events.CATEGORY,{
                external_id: GTM_get('visitorSessionID') || GTM_get('visitorSessionId'),
                value: getProducts(GTM_get('listProducts')).value,
                content_type: 'product',
                content_name: GTM_get('category'),
                content_category: GTM_get('breadcrumb'),
                content_ids: products_id,
                currency: 'BRL'
              }, 'trackCustom', state);
              break;
            
            case "produto":
              fbEv(events.CONTENT, {
                  external_id: GTM_get('visitorSessionID') || GTM_get('visitorSessionId'),
                  content_type: 'product',
                  content_ids: GTM_get('idProduct'),
                  content_name: GTM_get('nameProduct'),
                  content_category: GTM_get('category'),
                  value: GTM_get('priceSell'),
                  currency: 'BRL'
              },null,state);
              break;
              
            case "busca":
              var products_id = getProducts(GTM_get('listProducts')).id;
              fbEv(events.SEARCH,{
                  external_id: GTM_get('visitorSessionID') || GTM_get('visitorSessionId'),
                  value: getProducts(GTM_get('listProducts')).value,
                  content_type: 'product',
                  content_ids: products_id,
                  search_string: GTM_get('siteSearchTerm'),
                  currency: 'BRL',
                  content_category: 'Busca'
              },null, state);
              break;  

            case "carrinho":
              setTimeout(function(){
                var products_id = getProducts(GTM_get('ecommerce').checkout.products).id ? getProducts(GTM_get('ecommerce').checkout.products).id : 0;
                if(products_id.length > 0){
                  fbEv(events.CART,{
                    external_id: GTM_get('visitorSessionID') || GTM_get('visitorSessionId'),
                    content_type: 'product',
                    content_ids: products_id,
                    value: GTM_get('checkoutTotal') || getTotalProducts(GTM_get('checkoutProducts') || GTM_get('ecommerce').checkout.products),
                    num_items: getNumItens(GTM_get('ecommerce').checkout.products),
                    currency: 'BRL'
                  });
                }
              },1000);
              break;
                     
      }

        // Valida EasyCheckout
        if ("EasyCheckout" === GTM_get('pageCategory').substr(0, 12)) {

            setTimeout(function () {

                let oldPush = dataLayer.push;
                let lastPageCategory = "";

                dataLayer.push = function () {
                    var x = [].slice.call(arguments, 0);
                    var result = oldPush.apply(dataLayer, x);

                    switch (GTM_get('pageCategory').toLowerCase()) {
                        case "easycheckout_orderconfirmation":
                                if(lastPageCategory != GTM_get('pageCategory').toLowerCase() ){
                                    lastPageCategory = GTM_get('pageCategory').toLowerCase();
                                    let checkoutStep = GTM_get('ecommerce').checkout.actionField.step;
                                   
                              
                                    if(checkoutStep >= 2){
                                        fbEv(events.CHECKOUT, {
                                            external_id: GTM_get('visitorSessionID') || GTM_get('visitorSessionId'),
                                            content_category:'Carrinho',
                                            content_type : 'product_group',
                                            content_ids: getProductsCheckout().content_ids,
                                            currency: 'BRL',
                                            num_items: getProductsCheckout().num_items,
                                            value: getProductsCheckout().value
                                        }, null, state);
                                    }

                                }                
                            break;
                        case "easycheckout_orderplaced":
                          if(lastPageCategory != GTM_get('pageCategory').toLowerCase() ){
                              lastPageCategory = GTM_get('pageCategory').toLowerCase();
                              revenue = GTM_get('ecommerce').purchase.actionField.revenue
                              if(getProducts(GTM_get('ecommerce').purchase.products).id){
                                if(revenue){
                                  let products_id = getProducts(GTM_get('ecommerce').purchase.products).id;
                                  fbEv(events.PURCHASE,{
                                    external_id: GTM_get('visitorSessionID') || GTM_get('visitorSessionId'),
                                    content_type: 'product',
                                    content_ids: products_id,
                                    value: Math.abs(GTM_get('ecommerce').purchase.actionField.revenue),
                                    currency: 'BRL'
                                  },null, state) ;
                                }
                              }
                            }
                          break

                    }
                    return result;
                }
           },1000);
        }
    }

  },1000);
})();
